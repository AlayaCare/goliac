// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goliac-project/goliac/swagger_gen/restapi/operations/app"
	"github.com/goliac-project/goliac/swagger_gen/restapi/operations/health"
)

// NewGoliacAPI creates a new Goliac instance
func NewGoliacAPI(spec *loads.Document) *GoliacAPI {
	return &GoliacAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		AppGetCollaboratorHandler: app.GetCollaboratorHandlerFunc(func(params app.GetCollaboratorParams) middleware.Responder {
			return middleware.NotImplemented("operation app.GetCollaborator has not yet been implemented")
		}),
		AppGetCollaboratorsHandler: app.GetCollaboratorsHandlerFunc(func(params app.GetCollaboratorsParams) middleware.Responder {
			return middleware.NotImplemented("operation app.GetCollaborators has not yet been implemented")
		}),
		HealthGetLivenessHandler: health.GetLivenessHandlerFunc(func(params health.GetLivenessParams) middleware.Responder {
			return middleware.NotImplemented("operation health.GetLiveness has not yet been implemented")
		}),
		HealthGetReadinessHandler: health.GetReadinessHandlerFunc(func(params health.GetReadinessParams) middleware.Responder {
			return middleware.NotImplemented("operation health.GetReadiness has not yet been implemented")
		}),
		AppGetRepositoriesHandler: app.GetRepositoriesHandlerFunc(func(params app.GetRepositoriesParams) middleware.Responder {
			return middleware.NotImplemented("operation app.GetRepositories has not yet been implemented")
		}),
		AppGetRepositoryHandler: app.GetRepositoryHandlerFunc(func(params app.GetRepositoryParams) middleware.Responder {
			return middleware.NotImplemented("operation app.GetRepository has not yet been implemented")
		}),
		AppGetStatiticsHandler: app.GetStatiticsHandlerFunc(func(params app.GetStatiticsParams) middleware.Responder {
			return middleware.NotImplemented("operation app.GetStatitics has not yet been implemented")
		}),
		AppGetStatusHandler: app.GetStatusHandlerFunc(func(params app.GetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation app.GetStatus has not yet been implemented")
		}),
		AppGetTeamHandler: app.GetTeamHandlerFunc(func(params app.GetTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation app.GetTeam has not yet been implemented")
		}),
		AppGetTeamsHandler: app.GetTeamsHandlerFunc(func(params app.GetTeamsParams) middleware.Responder {
			return middleware.NotImplemented("operation app.GetTeams has not yet been implemented")
		}),
		AppGetUnmanagedHandler: app.GetUnmanagedHandlerFunc(func(params app.GetUnmanagedParams) middleware.Responder {
			return middleware.NotImplemented("operation app.GetUnmanaged has not yet been implemented")
		}),
		AppGetUserHandler: app.GetUserHandlerFunc(func(params app.GetUserParams) middleware.Responder {
			return middleware.NotImplemented("operation app.GetUser has not yet been implemented")
		}),
		AppGetUsersHandler: app.GetUsersHandlerFunc(func(params app.GetUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation app.GetUsers has not yet been implemented")
		}),
		AppPostExternalCreateRepositoryHandler: app.PostExternalCreateRepositoryHandlerFunc(func(params app.PostExternalCreateRepositoryParams) middleware.Responder {
			return middleware.NotImplemented("operation app.PostExternalCreateRepository has not yet been implemented")
		}),
		AppPostFlushCacheHandler: app.PostFlushCacheHandlerFunc(func(params app.PostFlushCacheParams) middleware.Responder {
			return middleware.NotImplemented("operation app.PostFlushCache has not yet been implemented")
		}),
		AppPostResyncHandler: app.PostResyncHandlerFunc(func(params app.PostResyncParams) middleware.Responder {
			return middleware.NotImplemented("operation app.PostResync has not yet been implemented")
		}),
	}
}

/*GoliacAPI goliac is a golang REST application skeleton The base path for all the APIs is "/api/v1".
 */
type GoliacAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// AppGetCollaboratorHandler sets the operation handler for the get collaborator operation
	AppGetCollaboratorHandler app.GetCollaboratorHandler
	// AppGetCollaboratorsHandler sets the operation handler for the get collaborators operation
	AppGetCollaboratorsHandler app.GetCollaboratorsHandler
	// HealthGetLivenessHandler sets the operation handler for the get liveness operation
	HealthGetLivenessHandler health.GetLivenessHandler
	// HealthGetReadinessHandler sets the operation handler for the get readiness operation
	HealthGetReadinessHandler health.GetReadinessHandler
	// AppGetRepositoriesHandler sets the operation handler for the get repositories operation
	AppGetRepositoriesHandler app.GetRepositoriesHandler
	// AppGetRepositoryHandler sets the operation handler for the get repository operation
	AppGetRepositoryHandler app.GetRepositoryHandler
	// AppGetStatiticsHandler sets the operation handler for the get statitics operation
	AppGetStatiticsHandler app.GetStatiticsHandler
	// AppGetStatusHandler sets the operation handler for the get status operation
	AppGetStatusHandler app.GetStatusHandler
	// AppGetTeamHandler sets the operation handler for the get team operation
	AppGetTeamHandler app.GetTeamHandler
	// AppGetTeamsHandler sets the operation handler for the get teams operation
	AppGetTeamsHandler app.GetTeamsHandler
	// AppGetUnmanagedHandler sets the operation handler for the get unmanaged operation
	AppGetUnmanagedHandler app.GetUnmanagedHandler
	// AppGetUserHandler sets the operation handler for the get user operation
	AppGetUserHandler app.GetUserHandler
	// AppGetUsersHandler sets the operation handler for the get users operation
	AppGetUsersHandler app.GetUsersHandler
	// AppPostExternalCreateRepositoryHandler sets the operation handler for the post external create repository operation
	AppPostExternalCreateRepositoryHandler app.PostExternalCreateRepositoryHandler
	// AppPostFlushCacheHandler sets the operation handler for the post flush cache operation
	AppPostFlushCacheHandler app.PostFlushCacheHandler
	// AppPostResyncHandler sets the operation handler for the post resync operation
	AppPostResyncHandler app.PostResyncHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *GoliacAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *GoliacAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *GoliacAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *GoliacAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *GoliacAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *GoliacAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *GoliacAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *GoliacAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *GoliacAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the GoliacAPI
func (o *GoliacAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AppGetCollaboratorHandler == nil {
		unregistered = append(unregistered, "app.GetCollaboratorHandler")
	}
	if o.AppGetCollaboratorsHandler == nil {
		unregistered = append(unregistered, "app.GetCollaboratorsHandler")
	}
	if o.HealthGetLivenessHandler == nil {
		unregistered = append(unregistered, "health.GetLivenessHandler")
	}
	if o.HealthGetReadinessHandler == nil {
		unregistered = append(unregistered, "health.GetReadinessHandler")
	}
	if o.AppGetRepositoriesHandler == nil {
		unregistered = append(unregistered, "app.GetRepositoriesHandler")
	}
	if o.AppGetRepositoryHandler == nil {
		unregistered = append(unregistered, "app.GetRepositoryHandler")
	}
	if o.AppGetStatiticsHandler == nil {
		unregistered = append(unregistered, "app.GetStatiticsHandler")
	}
	if o.AppGetStatusHandler == nil {
		unregistered = append(unregistered, "app.GetStatusHandler")
	}
	if o.AppGetTeamHandler == nil {
		unregistered = append(unregistered, "app.GetTeamHandler")
	}
	if o.AppGetTeamsHandler == nil {
		unregistered = append(unregistered, "app.GetTeamsHandler")
	}
	if o.AppGetUnmanagedHandler == nil {
		unregistered = append(unregistered, "app.GetUnmanagedHandler")
	}
	if o.AppGetUserHandler == nil {
		unregistered = append(unregistered, "app.GetUserHandler")
	}
	if o.AppGetUsersHandler == nil {
		unregistered = append(unregistered, "app.GetUsersHandler")
	}
	if o.AppPostExternalCreateRepositoryHandler == nil {
		unregistered = append(unregistered, "app.PostExternalCreateRepositoryHandler")
	}
	if o.AppPostFlushCacheHandler == nil {
		unregistered = append(unregistered, "app.PostFlushCacheHandler")
	}
	if o.AppPostResyncHandler == nil {
		unregistered = append(unregistered, "app.PostResyncHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *GoliacAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *GoliacAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *GoliacAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *GoliacAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *GoliacAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *GoliacAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the goliac API
func (o *GoliacAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *GoliacAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/collaborators/{collaboratorID}"] = app.NewGetCollaborator(o.context, o.AppGetCollaboratorHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/collaborators"] = app.NewGetCollaborators(o.context, o.AppGetCollaboratorsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/liveness"] = health.NewGetLiveness(o.context, o.HealthGetLivenessHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/readiness"] = health.NewGetReadiness(o.context, o.HealthGetReadinessHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repositories"] = app.NewGetRepositories(o.context, o.AppGetRepositoriesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repositories/{repositoryID}"] = app.NewGetRepository(o.context, o.AppGetRepositoryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/statistics"] = app.NewGetStatitics(o.context, o.AppGetStatiticsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status"] = app.NewGetStatus(o.context, o.AppGetStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamID}"] = app.NewGetTeam(o.context, o.AppGetTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams"] = app.NewGetTeams(o.context, o.AppGetTeamsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/unmanaged"] = app.NewGetUnmanaged(o.context, o.AppGetUnmanagedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}"] = app.NewGetUser(o.context, o.AppGetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = app.NewGetUsers(o.context, o.AppGetUsersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/external/createrepository"] = app.NewPostExternalCreateRepository(o.context, o.AppPostExternalCreateRepositoryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/flushcache"] = app.NewPostFlushCache(o.context, o.AppPostFlushCacheHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/resync"] = app.NewPostResync(o.context, o.AppPostResyncHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *GoliacAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *GoliacAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *GoliacAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *GoliacAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *GoliacAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
