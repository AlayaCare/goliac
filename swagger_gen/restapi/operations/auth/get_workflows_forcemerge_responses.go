// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goliac-project/goliac/swagger_gen/models"
)

// GetWorkflowsForcemergeOKCode is the HTTP code returned for type GetWorkflowsForcemergeOK
const GetWorkflowsForcemergeOKCode int = 200

/*
GetWorkflowsForcemergeOK get list of all PR force merge workflows

swagger:response getWorkflowsForcemergeOK
*/
type GetWorkflowsForcemergeOK struct {

	/*
	  In: Body
	*/
	Payload models.WorkflowsPrmerged `json:"body,omitempty"`
}

// NewGetWorkflowsForcemergeOK creates GetWorkflowsForcemergeOK with default headers values
func NewGetWorkflowsForcemergeOK() *GetWorkflowsForcemergeOK {

	return &GetWorkflowsForcemergeOK{}
}

// WithPayload adds the payload to the get workflows forcemerge o k response
func (o *GetWorkflowsForcemergeOK) WithPayload(payload models.WorkflowsPrmerged) *GetWorkflowsForcemergeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workflows forcemerge o k response
func (o *GetWorkflowsForcemergeOK) SetPayload(payload models.WorkflowsPrmerged) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkflowsForcemergeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.WorkflowsPrmerged{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetWorkflowsForcemergeUnauthorizedCode is the HTTP code returned for type GetWorkflowsForcemergeUnauthorized
const GetWorkflowsForcemergeUnauthorizedCode int = 401

/*
GetWorkflowsForcemergeUnauthorized Unauthorized

swagger:response getWorkflowsForcemergeUnauthorized
*/
type GetWorkflowsForcemergeUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWorkflowsForcemergeUnauthorized creates GetWorkflowsForcemergeUnauthorized with default headers values
func NewGetWorkflowsForcemergeUnauthorized() *GetWorkflowsForcemergeUnauthorized {

	return &GetWorkflowsForcemergeUnauthorized{}
}

// WithPayload adds the payload to the get workflows forcemerge unauthorized response
func (o *GetWorkflowsForcemergeUnauthorized) WithPayload(payload *models.Error) *GetWorkflowsForcemergeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workflows forcemerge unauthorized response
func (o *GetWorkflowsForcemergeUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkflowsForcemergeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetWorkflowsForcemergeDefault generic error response

swagger:response getWorkflowsForcemergeDefault
*/
type GetWorkflowsForcemergeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWorkflowsForcemergeDefault creates GetWorkflowsForcemergeDefault with default headers values
func NewGetWorkflowsForcemergeDefault(code int) *GetWorkflowsForcemergeDefault {
	if code <= 0 {
		code = 500
	}

	return &GetWorkflowsForcemergeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get workflows forcemerge default response
func (o *GetWorkflowsForcemergeDefault) WithStatusCode(code int) *GetWorkflowsForcemergeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get workflows forcemerge default response
func (o *GetWorkflowsForcemergeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get workflows forcemerge default response
func (o *GetWorkflowsForcemergeDefault) WithPayload(payload *models.Error) *GetWorkflowsForcemergeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workflows forcemerge default response
func (o *GetWorkflowsForcemergeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkflowsForcemergeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
