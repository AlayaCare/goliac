// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWorkflowsForcemergeHandlerFunc turns a function with the right signature into a get workflows forcemerge handler
type GetWorkflowsForcemergeHandlerFunc func(GetWorkflowsForcemergeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWorkflowsForcemergeHandlerFunc) Handle(params GetWorkflowsForcemergeParams) middleware.Responder {
	return fn(params)
}

// GetWorkflowsForcemergeHandler interface for that can handle valid get workflows forcemerge params
type GetWorkflowsForcemergeHandler interface {
	Handle(GetWorkflowsForcemergeParams) middleware.Responder
}

// NewGetWorkflowsForcemerge creates a new http.Handler for the get workflows forcemerge operation
func NewGetWorkflowsForcemerge(ctx *middleware.Context, handler GetWorkflowsForcemergeHandler) *GetWorkflowsForcemerge {
	return &GetWorkflowsForcemerge{Context: ctx, Handler: handler}
}

/*
	GetWorkflowsForcemerge swagger:route GET /auth/workflows_forcemerge auth getWorkflowsForcemerge

Get all PR force merge workflows
*/
type GetWorkflowsForcemerge struct {
	Context *middleware.Context
	Handler GetWorkflowsForcemergeHandler
}

func (o *GetWorkflowsForcemerge) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetWorkflowsForcemergeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
