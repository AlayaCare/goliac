// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostWorkflowForcemergeHandlerFunc turns a function with the right signature into a post workflow forcemerge handler
type PostWorkflowForcemergeHandlerFunc func(PostWorkflowForcemergeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostWorkflowForcemergeHandlerFunc) Handle(params PostWorkflowForcemergeParams) middleware.Responder {
	return fn(params)
}

// PostWorkflowForcemergeHandler interface for that can handle valid post workflow forcemerge params
type PostWorkflowForcemergeHandler interface {
	Handle(PostWorkflowForcemergeParams) middleware.Responder
}

// NewPostWorkflowForcemerge creates a new http.Handler for the post workflow forcemerge operation
func NewPostWorkflowForcemerge(ctx *middleware.Context, handler PostWorkflowForcemergeHandler) *PostWorkflowForcemerge {
	return &PostWorkflowForcemerge{Context: ctx, Handler: handler}
}

/*
	PostWorkflowForcemerge swagger:route POST /auth/workflows_forcemerge/{workflowName} auth postWorkflowForcemerge

Bypass PR approval and force mere the PR
*/
type PostWorkflowForcemerge struct {
	Context *middleware.Context
	Handler PostWorkflowForcemergeHandler
}

func (o *PostWorkflowForcemerge) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostWorkflowForcemergeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostWorkflowForcemergeBody post workflow forcemerge body
//
// swagger:model PostWorkflowForcemergeBody
type PostWorkflowForcemergeBody struct {

	// explanation
	// Required: true
	// Min Length: 1
	Explanation string `json:"explanation"`

	// pr url
	// Required: true
	// Min Length: 10
	PrURL string `json:"pr_url"`
}

// Validate validates this post workflow forcemerge body
func (o *PostWorkflowForcemergeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExplanation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostWorkflowForcemergeBody) validateExplanation(formats strfmt.Registry) error {

	if err := validate.RequiredString("body"+"."+"explanation", "body", o.Explanation); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"explanation", "body", o.Explanation, 1); err != nil {
		return err
	}

	return nil
}

func (o *PostWorkflowForcemergeBody) validatePrURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("body"+"."+"pr_url", "body", o.PrURL); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"pr_url", "body", o.PrURL, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post workflow forcemerge body based on context it is used
func (o *PostWorkflowForcemergeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostWorkflowForcemergeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostWorkflowForcemergeBody) UnmarshalBinary(b []byte) error {
	var res PostWorkflowForcemergeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
